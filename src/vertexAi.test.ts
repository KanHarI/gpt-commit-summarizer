import assert from "assert";

import { getOpenAISummaryForFile } from "./filesSummary";
import { summarizePr } from "./summarizePr";
import { setProject } from "./vertexAi";

describe("Google Vertex AI", function () {
  beforeAll(function () {
    assert(process.env.PROJECT_ID, "PROJECT_ID must be set");
    setProject(process.env.PROJECT_ID!);
  });
  it("returns a PR summary", async function () {
    const modifiedFiles: Record<string, string> = {
      "src/commitSummary.ts": "A commit summary",
      "src/filesSummary.ts": "A files summary",
      "src/index.ts": "An index",
    };

    const commitSummaries: Array<[string, string]> = [
      ["1234567890123456789012345678901234567890", "A commit summary"],
      ["1234567890123456789012345678901234567891", "A commit summary"],
      ["1234567890123456789012345678901234567892", "A commit summary"],
    ];

    const summary = await summarizePr(modifiedFiles, commitSummaries);
    console.log(summary);
    assert(summary.length > 0);
  });
  it("supports long summaries", async function () {
    // Create sample patch string
    const patch = `diff --git a/src/commitSummary.ts b/src/commitSummary.ts
    index 5c4d745..7b8c341 100644
    --- a/src/commitSummary.ts
    +++ b/src/commitSummary.ts
    @@ -2,7 +2,7 @@ import type { gitDiffMetadata } from "./DiffMetadata";
    `;
    const patch2 = `import { octokit } from "./octokit";
     import { SHARED_PROMPT } from "./sharedPrompt";
     import { summarizePr } from "./summarizePr";
    -import { MAX_AI_QUERY_LENGTH, predict } from "./vertexAi";
    +import { predict } from "./vertexAi";
     
     export const startPRSummary = "###### AUTOGENERATED PR SUMMARY ######";
     export const endPRSummary = "###### END AUTOGENERATED PR SUMMARY ######";
  `;
    const summary = await getOpenAISummaryForFile(
      "src/commitSummary.ts",
      patch + patch2.repeat(100)
    );
    console.log(summary);
    assert(summary.length > 0);
  });
});
